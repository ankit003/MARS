# -*- coding: utf-8 -*-
"""MARS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TNTdfTgNPO8d9JGmBq3ZNZLwxL5nwAlL
"""

!pip install scikit-surprise

#!python --version

# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
import ast 
from scipy import stats
from ast import literal_eval
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity
from nltk.stem.snowball import SnowballStemmer
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import wordnet
from surprise import Reader, Dataset, SVD, evaluate

import warnings; warnings.simplefilter('ignore')

"""## Load dataset"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client. Authentication code = 4/RgFt5SkW43ROouDRLDKg6bQnyoj9OsWVNltMaGQwJ4lUui8cxOaVuCw
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

credits_link = "https://drive.google.com/open?id=1v305o0T9TSMswQVHj-Q1nimdMMzXkdJK"
keywords_link = "https://drive.google.com/open?id=1dIESr-9RbZ8A_-OKNbjoeq2XWlLg3NKE"
links_link = "https://drive.google.com/open?id=1W9jSVv4y78__cpBT864vpz9fJ4HEIwuA"
movies_metadata_link = "https://drive.google.com/open?id=15436I9WmH6rIZ1yUA3dgQv3QMQ115xN0"
ratings_link = "https://drive.google.com/open?id=1elZCUZwUuMJaS2NqJ59Wvm5BSHc4oqod"
movies_link = "https://drive.google.com/open?id=1AcHIz_kQOzky4h4_XxkimtSI1WkZ9eys"
ratings_large_link = "https://drive.google.com/open?id=19E5U3R7kf3g0287ptfYuk128PdlI4rbU"

fluff, credits_link_id = credits_link.split('=')
fluff, keywords_link_id = keywords_link.split('=')
fluff, links_link_id = links_link.split('=')
fluff, movies_metadata_link_id = movies_metadata_link.split('=')
fluff, ratings_link_id = ratings_link.split('=')
fluff, movies_link_id = movies_link.split('=')
fluff, ratings_large_link_id = ratings_large_link.split('=')

print (credits_link_id+' '+keywords_link_id+' '+links_link_id+' '+movies_metadata_link_id+' '+ratings_link_id)

downloaded_credits = drive.CreateFile({'id':credits_link_id})
downloaded_keywords = drive.CreateFile({'id':keywords_link_id})
downloaded_links = drive.CreateFile({'id':links_link_id})
downloaded_movies_metadata = drive.CreateFile({'id':movies_metadata_link_id})
downloaded_ratings = drive.CreateFile({'id':ratings_link_id})
downloaded_movies = drive.CreateFile({'id':movies_link_id})
downloaded_ratings_large = drive.CreateFile({'id':ratings_large_link_id})

downloaded_credits.GetContentFile('credits.csv')
downloaded_keywords.GetContentFile('keywords.csv')  
downloaded_links.GetContentFile('links_small.csv')  
downloaded_movies_metadata.GetContentFile('movies_metadata.csv')  
downloaded_ratings.GetContentFile('ratings_small.csv')  
downloaded_movies.GetContentFile('movies.csv') 
downloaded_ratings_large.GetContentFile('ratings.csv')

credits = pd.read_csv('credits.csv')
keywords = pd.read_csv('keywords.csv')
links_small = pd.read_csv('links_small.csv')
md = pd.read_csv('movies_metadata.csv',encoding='utf-8')
ratings = pd.read_csv('ratings_small.csv')

"""### Understand dataset"""

'''movies = pd.read_csv('movies.csv')
movies.tail()

#tags = pd.read_csv('tags.csv')
#tags.head()'''

credits.head()
#credits.iloc[0:3]
#credits['cast'].iloc[0:3]
#credits.iloc[:,0:2]

credits.columns

credits.shape

keywords.head()

keywords.shape

links_small.head()

links_small.columns

links_small.shape

md.iloc[0:3].transpose()
#md.head()

md.columns

md.shape

ratings.head()

ratings.columns

ratings.shape

ratings.info()

"""### 1 Popularity based recommendation system"""

md['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i[
    'name'] for i in x] if isinstance(x, list) else [])

# this is V
vote_counts = md[md['vote_count'].notnull()]['vote_count'].astype('int')
#print(vote_counts)

# this is R
vote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')
#print(vote_averages)

# this is C
C = vote_averages.mean()
C
#print(vote_counts)

print(vote_counts.head())

#vote_counts = vote_counts.max
#print(vote_counts.head())
m = vote_counts.quantile(.95)
m

# Pre-processing step for getting year from date by splliting it using '-'

md['year'] = pd.to_datetime(md['release_date'], errors='coerce').apply(
    lambda x: str(x).split('-')[0] if x != np.nan else np.nan)

qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) & 
               (md['vote_average'].notnull())][['title','year', 'vote_count', 'vote_average','popularity','genres']]

#print(qualified)
qualified['vote_count'] = qualified['vote_count'].astype('int')
#print(qualified)
qualified['vote_average'] = qualified['vote_average'].astype('int')
qualified.shape

def weighted_rating(x):
    v = x['vote_count']
    R = x['vote_average']
    return (v/(v+m) * R) + (m/(m+v) * C)

qualified['wr'] = qualified.apply(weighted_rating, axis=1)

qualified = qualified.sort_values('wr', ascending=False).head(250)

qualified.head(5)

'''
>>> s
     a   b
one  1.  2.
two  3.  4.

>>> s.stack()
one a    1
    b    2
two a    3
    b    4
'''
s = md.apply(lambda x: pd.Series(x['genres']),axis=1).stack().reset_index(level=1, drop=True)
print(s.head(5))
s.name = 'genre'
gen_md = md.drop('genres', axis=1).join(s)
gen_md.head(3).transpose()

def build_chart(genre, percentile=0.95):
    df = gen_md[gen_md['genre'] == genre]
    vote_counts = df[df['vote_count'].notnull()]['vote_count'].astype('int')
    vote_averages = df[df['vote_average'].notnull()]['vote_average'].astype('int')
    C = vote_averages.mean()
    m = vote_counts.quantile(percentile)
    
    qualified = df[(df['vote_count'] >= m) & (df['vote_count'].notnull()) & 
                   (df['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity']]
    qualified['vote_count'] = qualified['vote_count'].astype('int')
    qualified['vote_average'] = qualified['vote_average'].astype('int')
    
    qualified['wr'] = qualified.apply(lambda x: 
                        (x['vote_count']/(x['vote_count']+m) * x['vote_average']) + (m/(m+x['vote_count']) * C),
                        axis=1)
    qualified = qualified.sort_values('wr', ascending=False).head(250)
    
    return qualified

build_chart('Mystery').head(5)

"""### 2 Content based recommendation system"""

links_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')

## Pre-processing step

def convert_int(x):
    try:
        return int(x)
    except:
        return np.nan

md['id'] = md['id'].apply(convert_int)
md[md['id'].isnull()]

#md = md.drop([19726, 30847, 38104, 40330, 46188]) #for new dataset
md = md.drop([19730, 29503, 35587]) #for old dataset

md['id'] = md['id'].astype('int')

print(md.shape)
smd = md[md['id'].isin(links_small)]
print(smd.shape)
#print(smd)

"""###  Content based recommendation system : Using movie description and taglines"""

smd['tagline'] = smd['tagline'].fillna('')
#print(smd)
#smd['keywords'] = smd['keywords'].fillna('')
smd['description'] = smd['overview'] + smd['tagline']
#smd['description'] = smd['genres'].astype(str)
smd['description'] = smd['description'].fillna('')
#smd['description']

tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
tfidf_matrix = tf.fit_transform(smd['description'].head(10000))

tfidf_matrix.shape
#print(tfidf_matrix)

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

cosine_sim[0]
print(cosine_sim[0])
cosine_sim.shape

smd = smd.reset_index()
titles = smd['title']
indices = pd.Series(smd.index, index=smd['title'])
indices.head(10)

def recommend_movies_similar_to(title):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:31]
    movie_indices = [i[0] for i in sim_scores]
    return titles.iloc[movie_indices]

recommend_movies_similar_to('Star Wars').head(10)

"""### Content based RS : Using movie description, taglines, keywords, cast, director and genres"""

keywords['id'] = keywords['id'].astype('int')
#print(hasattr(credits,'id'))
credits['id'] = credits['id'].astype('int')
md['id'] = md['id'].astype('int')

md.shape

md = md.merge(credits, on='id')
md = md.merge(keywords, on='id')
md.shape

smd = md[md['id'].isin(links_small)]
smd.shape

# smd = md[md['id'].isin(links_small['tmdbId'])]
# smd.shape

smd['cast'] = smd['cast'].apply(literal_eval)
smd['crew'] = smd['crew'].apply(literal_eval)
smd['keywords'] = smd['keywords'].apply(literal_eval)
smd['cast_size'] = smd['cast'].apply(lambda x: len(x))
smd['crew_size'] = smd['crew'].apply(lambda x: len(x))

def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan

smd['director'] = smd['crew'].apply(get_director)
smd['cast'] = smd['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])
smd['cast'] = smd['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)
smd['keywords'] = smd['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])

smd['cast'] = smd['cast'].apply(lambda x: [str.lower(i.replace(" ", "")) for i in x])
smd['director'] = smd['director'].astype('str').apply(lambda x: str.lower(x.replace(" ", "")))
smd['director'] = smd['director'].apply(lambda x: [x,x, x])

s = smd.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level=1, drop=True)
s.name = 'keyword'
s = s.value_counts()
s[:5]

s = s[s > 1]

# Just an example
stemmer = SnowballStemmer('english')
stemmer.stem('dogs')

def filter_keywords(x):
    words = []
    for i in x:
        if i in s:
            words.append(i)
    return words

smd['keywords'] = smd['keywords'].apply(filter_keywords)
smd['keywords'] = smd['keywords'].apply(lambda x: [stemmer.stem(i) for i in x])
smd['keywords'] = smd['keywords'].apply(lambda x: [str.lower(i.replace(" ", "")) for i in x])

smd['soup'] = smd['keywords'] + smd['cast'] + smd['director'] + smd['genres']
#smd['soup'] = smd['keywords'] + smd['genres']
smd['soup'] = smd['soup'].apply(lambda x: ' '.join(x))

count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
count_matrix = count.fit_transform(smd['soup'].head(20000))

count_matrix.shape

cosine_sim = cosine_similarity(count_matrix, count_matrix)

smd = smd.reset_index()
titles = smd['title']
indices = pd.Series(smd.index, index=smd['title'])

recommend_movies_similar_to('The Dark Knight').head(10)

recommend_movies_similar_to('Star Wars').head(10)

recommend_movies_similar_to('Interstellar').head(10)

recommend_movies_similar_to('The Dark Knight').head(10)

"""#### Add Popularity and Ratings"""

def improved_recommend_movies_similar_to(title):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:26]
    movie_indices = [i[0] for i in sim_scores]
    
    movies = smd.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'year']]
    vote_counts = movies[movies['vote_count'].notnull()]['vote_count'].astype('int')
    vote_averages = movies[movies['vote_average'].notnull()]['vote_average'].astype('int')
    C = vote_averages.mean()
    m = vote_counts.quantile(0.60)
    qualified = movies[(movies['vote_count'] >= m) & (movies['vote_count'].notnull()) & 
                       (movies['vote_average'].notnull())]
    qualified['vote_count'] = qualified['vote_count'].astype('int')
    qualified['vote_average'] = qualified['vote_average'].astype('int')
    qualified['wr'] = qualified.apply(weighted_rating, axis=1)
    qualified = qualified.sort_values('wr', ascending=False).head(10)
    return qualified

improved_recommend_movies_similar_to('Star Wars')

improved_recommend_movies_similar_to('The Dark Knight')

"""### 6.3 CF based recommendation system

* Singular Value Decomposition (SVD) to minimise RMSE (Root Mean Square Error) and give great recommendations.
"""

# surprise reader API to read the dataset
reader = Reader()

data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)
data.split(n_folds=5)

svd = SVD()
evaluate(svd, data, measures=['RMSE', 'MAE'])

trainset = data.build_full_trainset()
svd.train(trainset)

ratings[ratings['userId'] == 9]

svd.predict(9, 1357)

"""### Combined recommendation system

* **Input:** User ID and the Title of a Movie
* **Output:** Similar movies sorted on the basis of expected ratings by that particular user.
"""

def convert_int(x):
    try:
        return int(x)
    except:
        return np.nan

id_map = pd.read_csv('links_small.csv')[['movieId', 'tmdbId']]
id_map['tmdbId'] = id_map['tmdbId'].apply(convert_int)
id_map.columns = ['movieId', 'id']
id_map = id_map.merge(smd[['title', 'id']], on='id').set_index('title')
#id_map = id_map.set_index('tmdbId')

indices_map = id_map.set_index('id')

def cbcf(userId, title):
    idx = indices[title]
    tmdbId = id_map.loc[title]['id']
    movie_id = id_map.loc[title]['movieId']
    sim_scores = list(enumerate(cosine_sim[int(idx)]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:26]
    movie_indices = [i[0] for i in sim_scores]
    movies = smd.iloc[movie_indices][['title', 'vote_count', 'vote_average', 'release_date', 'id']]
    movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId']).est)
    movies = movies.sort_values('est', ascending=False)
    return movies.head(10)

cbcf(1, 'Toy Story')

cbcf(9, 'Star Wars')

cbcf(9, "The Dark Knight")